import java.util.Arrays;

public class PascalsTriangleRecursive {
    
    // Recursive function to compute the Nth row of Pascalâ€™s Triangle
    public static int[] getPascalsRow(int n) {
        if (n == 0) {
            return new int[]{1};
        }
        
        int[] prevRow = getPascalsRow(n - 1);
        int[] currentRow = new int[n + 1];
        
        currentRow[0] = currentRow[n] = 1;
        
        for (int i = 1; i < n; i++) {
            currentRow[i] = prevRow[i - 1] + prevRow[i];
        }
        
        return currentRow;
    }

    // Function to print Pascal's Triangle up to row N
    public static void printPascalsTriangle(int N) {
        for (int i = 0; i <= N; i++) {
            // Print leading spaces for formatting
            System.out.print(" ".repeat((N - i) * 2)); 
            
            // Get the current row
            int[] row = getPascalsRow(i);
            
            // Print row elements with spaces
            for (int num : row) {
                System.out.print(num + "   ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int N = 5; // Change this to get different sizes
        printPascalsTriangle(N);
    }
}
